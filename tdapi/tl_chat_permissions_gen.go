// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/PrismAIO/td/bin"
	"github.com/PrismAIO/td/tdjson"
	"github.com/PrismAIO/td/tdp"
	"github.com/PrismAIO/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChatPermissions represents TL type `chatPermissions#ce31de89`.
type ChatPermissions struct {
	// True, if the user can send text messages, contacts, locations, and venues
	CanSendMessages bool
	// True, if the user can send audio files, documents, photos, videos, video notes, and
	// voice notes. Implies can_send_messages permissions
	CanSendMediaMessages bool
	// True, if the user can send polls. Implies can_send_messages permissions
	CanSendPolls bool
	// True, if the user can send animations, games, stickers, and dice and use inline bots.
	// Implies can_send_messages permissions
	CanSendOtherMessages bool
	// True, if the user may add a web page preview to their messages. Implies
	// can_send_messages permissions
	CanAddWebPagePreviews bool
	// True, if the user can change the chat title, photo, and other settings
	CanChangeInfo bool
	// True, if the user can invite new users to the chat
	CanInviteUsers bool
	// True, if the user can pin messages
	CanPinMessages bool
	// True, if the user can manage topics
	CanManageTopics bool
}

// ChatPermissionsTypeID is TL type id of ChatPermissions.
const ChatPermissionsTypeID = 0xce31de89

// Ensuring interfaces in compile-time for ChatPermissions.
var (
	_ bin.Encoder     = &ChatPermissions{}
	_ bin.Decoder     = &ChatPermissions{}
	_ bin.BareEncoder = &ChatPermissions{}
	_ bin.BareDecoder = &ChatPermissions{}
)

func (c *ChatPermissions) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.CanSendMessages == false) {
		return false
	}
	if !(c.CanSendMediaMessages == false) {
		return false
	}
	if !(c.CanSendPolls == false) {
		return false
	}
	if !(c.CanSendOtherMessages == false) {
		return false
	}
	if !(c.CanAddWebPagePreviews == false) {
		return false
	}
	if !(c.CanChangeInfo == false) {
		return false
	}
	if !(c.CanInviteUsers == false) {
		return false
	}
	if !(c.CanPinMessages == false) {
		return false
	}
	if !(c.CanManageTopics == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatPermissions) String() string {
	if c == nil {
		return "ChatPermissions(nil)"
	}
	type Alias ChatPermissions
	return fmt.Sprintf("ChatPermissions%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatPermissions) TypeID() uint32 {
	return ChatPermissionsTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatPermissions) TypeName() string {
	return "chatPermissions"
}

// TypeInfo returns info about TL type.
func (c *ChatPermissions) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatPermissions",
		ID:   ChatPermissionsTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "CanSendMessages",
			SchemaName: "can_send_messages",
		},
		{
			Name:       "CanSendMediaMessages",
			SchemaName: "can_send_media_messages",
		},
		{
			Name:       "CanSendPolls",
			SchemaName: "can_send_polls",
		},
		{
			Name:       "CanSendOtherMessages",
			SchemaName: "can_send_other_messages",
		},
		{
			Name:       "CanAddWebPagePreviews",
			SchemaName: "can_add_web_page_previews",
		},
		{
			Name:       "CanChangeInfo",
			SchemaName: "can_change_info",
		},
		{
			Name:       "CanInviteUsers",
			SchemaName: "can_invite_users",
		},
		{
			Name:       "CanPinMessages",
			SchemaName: "can_pin_messages",
		},
		{
			Name:       "CanManageTopics",
			SchemaName: "can_manage_topics",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatPermissions) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatPermissions#ce31de89 as nil")
	}
	b.PutID(ChatPermissionsTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatPermissions) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatPermissions#ce31de89 as nil")
	}
	b.PutBool(c.CanSendMessages)
	b.PutBool(c.CanSendMediaMessages)
	b.PutBool(c.CanSendPolls)
	b.PutBool(c.CanSendOtherMessages)
	b.PutBool(c.CanAddWebPagePreviews)
	b.PutBool(c.CanChangeInfo)
	b.PutBool(c.CanInviteUsers)
	b.PutBool(c.CanPinMessages)
	b.PutBool(c.CanManageTopics)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatPermissions) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatPermissions#ce31de89 to nil")
	}
	if err := b.ConsumeID(ChatPermissionsTypeID); err != nil {
		return fmt.Errorf("unable to decode chatPermissions#ce31de89: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatPermissions) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatPermissions#ce31de89 to nil")
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_messages: %w", err)
		}
		c.CanSendMessages = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_media_messages: %w", err)
		}
		c.CanSendMediaMessages = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_polls: %w", err)
		}
		c.CanSendPolls = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_other_messages: %w", err)
		}
		c.CanSendOtherMessages = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_add_web_page_previews: %w", err)
		}
		c.CanAddWebPagePreviews = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_change_info: %w", err)
		}
		c.CanChangeInfo = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_invite_users: %w", err)
		}
		c.CanInviteUsers = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_pin_messages: %w", err)
		}
		c.CanPinMessages = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_manage_topics: %w", err)
		}
		c.CanManageTopics = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatPermissions) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatPermissions#ce31de89 as nil")
	}
	b.ObjStart()
	b.PutID("chatPermissions")
	b.Comma()
	b.FieldStart("can_send_messages")
	b.PutBool(c.CanSendMessages)
	b.Comma()
	b.FieldStart("can_send_media_messages")
	b.PutBool(c.CanSendMediaMessages)
	b.Comma()
	b.FieldStart("can_send_polls")
	b.PutBool(c.CanSendPolls)
	b.Comma()
	b.FieldStart("can_send_other_messages")
	b.PutBool(c.CanSendOtherMessages)
	b.Comma()
	b.FieldStart("can_add_web_page_previews")
	b.PutBool(c.CanAddWebPagePreviews)
	b.Comma()
	b.FieldStart("can_change_info")
	b.PutBool(c.CanChangeInfo)
	b.Comma()
	b.FieldStart("can_invite_users")
	b.PutBool(c.CanInviteUsers)
	b.Comma()
	b.FieldStart("can_pin_messages")
	b.PutBool(c.CanPinMessages)
	b.Comma()
	b.FieldStart("can_manage_topics")
	b.PutBool(c.CanManageTopics)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatPermissions) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatPermissions#ce31de89 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatPermissions"); err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: %w", err)
			}
		case "can_send_messages":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_messages: %w", err)
			}
			c.CanSendMessages = value
		case "can_send_media_messages":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_media_messages: %w", err)
			}
			c.CanSendMediaMessages = value
		case "can_send_polls":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_polls: %w", err)
			}
			c.CanSendPolls = value
		case "can_send_other_messages":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_send_other_messages: %w", err)
			}
			c.CanSendOtherMessages = value
		case "can_add_web_page_previews":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_add_web_page_previews: %w", err)
			}
			c.CanAddWebPagePreviews = value
		case "can_change_info":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_change_info: %w", err)
			}
			c.CanChangeInfo = value
		case "can_invite_users":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_invite_users: %w", err)
			}
			c.CanInviteUsers = value
		case "can_pin_messages":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_pin_messages: %w", err)
			}
			c.CanPinMessages = value
		case "can_manage_topics":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode chatPermissions#ce31de89: field can_manage_topics: %w", err)
			}
			c.CanManageTopics = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetCanSendMessages returns value of CanSendMessages field.
func (c *ChatPermissions) GetCanSendMessages() (value bool) {
	if c == nil {
		return
	}
	return c.CanSendMessages
}

// GetCanSendMediaMessages returns value of CanSendMediaMessages field.
func (c *ChatPermissions) GetCanSendMediaMessages() (value bool) {
	if c == nil {
		return
	}
	return c.CanSendMediaMessages
}

// GetCanSendPolls returns value of CanSendPolls field.
func (c *ChatPermissions) GetCanSendPolls() (value bool) {
	if c == nil {
		return
	}
	return c.CanSendPolls
}

// GetCanSendOtherMessages returns value of CanSendOtherMessages field.
func (c *ChatPermissions) GetCanSendOtherMessages() (value bool) {
	if c == nil {
		return
	}
	return c.CanSendOtherMessages
}

// GetCanAddWebPagePreviews returns value of CanAddWebPagePreviews field.
func (c *ChatPermissions) GetCanAddWebPagePreviews() (value bool) {
	if c == nil {
		return
	}
	return c.CanAddWebPagePreviews
}

// GetCanChangeInfo returns value of CanChangeInfo field.
func (c *ChatPermissions) GetCanChangeInfo() (value bool) {
	if c == nil {
		return
	}
	return c.CanChangeInfo
}

// GetCanInviteUsers returns value of CanInviteUsers field.
func (c *ChatPermissions) GetCanInviteUsers() (value bool) {
	if c == nil {
		return
	}
	return c.CanInviteUsers
}

// GetCanPinMessages returns value of CanPinMessages field.
func (c *ChatPermissions) GetCanPinMessages() (value bool) {
	if c == nil {
		return
	}
	return c.CanPinMessages
}

// GetCanManageTopics returns value of CanManageTopics field.
func (c *ChatPermissions) GetCanManageTopics() (value bool) {
	if c == nil {
		return
	}
	return c.CanManageTopics
}
