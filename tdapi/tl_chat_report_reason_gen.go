// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/PrismAIO/td/bin"
	"github.com/PrismAIO/td/tdjson"
	"github.com/PrismAIO/td/tdp"
	"github.com/PrismAIO/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChatReportReasonSpam represents TL type `chatReportReasonSpam#e18d10a1`.
type ChatReportReasonSpam struct {
}

// ChatReportReasonSpamTypeID is TL type id of ChatReportReasonSpam.
const ChatReportReasonSpamTypeID = 0xe18d10a1

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonSpam) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonSpam.
var (
	_ bin.Encoder     = &ChatReportReasonSpam{}
	_ bin.Decoder     = &ChatReportReasonSpam{}
	_ bin.BareEncoder = &ChatReportReasonSpam{}
	_ bin.BareDecoder = &ChatReportReasonSpam{}

	_ ChatReportReasonClass = &ChatReportReasonSpam{}
)

func (c *ChatReportReasonSpam) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonSpam) String() string {
	if c == nil {
		return "ChatReportReasonSpam(nil)"
	}
	type Alias ChatReportReasonSpam
	return fmt.Sprintf("ChatReportReasonSpam%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonSpam) TypeID() uint32 {
	return ChatReportReasonSpamTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonSpam) TypeName() string {
	return "chatReportReasonSpam"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonSpam) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonSpam",
		ID:   ChatReportReasonSpamTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonSpam) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonSpam#e18d10a1 as nil")
	}
	b.PutID(ChatReportReasonSpamTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonSpam) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonSpam#e18d10a1 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonSpam) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonSpam#e18d10a1 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonSpamTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonSpam#e18d10a1: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonSpam) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonSpam#e18d10a1 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonSpam) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonSpam#e18d10a1 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonSpam")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonSpam) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonSpam#e18d10a1 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonSpam"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonSpam#e18d10a1: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonViolence represents TL type `chatReportReasonViolence#b0b637fd`.
type ChatReportReasonViolence struct {
}

// ChatReportReasonViolenceTypeID is TL type id of ChatReportReasonViolence.
const ChatReportReasonViolenceTypeID = 0xb0b637fd

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonViolence) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonViolence.
var (
	_ bin.Encoder     = &ChatReportReasonViolence{}
	_ bin.Decoder     = &ChatReportReasonViolence{}
	_ bin.BareEncoder = &ChatReportReasonViolence{}
	_ bin.BareDecoder = &ChatReportReasonViolence{}

	_ ChatReportReasonClass = &ChatReportReasonViolence{}
)

func (c *ChatReportReasonViolence) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonViolence) String() string {
	if c == nil {
		return "ChatReportReasonViolence(nil)"
	}
	type Alias ChatReportReasonViolence
	return fmt.Sprintf("ChatReportReasonViolence%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonViolence) TypeID() uint32 {
	return ChatReportReasonViolenceTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonViolence) TypeName() string {
	return "chatReportReasonViolence"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonViolence) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonViolence",
		ID:   ChatReportReasonViolenceTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonViolence) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonViolence#b0b637fd as nil")
	}
	b.PutID(ChatReportReasonViolenceTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonViolence) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonViolence#b0b637fd as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonViolence) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonViolence#b0b637fd to nil")
	}
	if err := b.ConsumeID(ChatReportReasonViolenceTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonViolence#b0b637fd: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonViolence) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonViolence#b0b637fd to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonViolence) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonViolence#b0b637fd as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonViolence")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonViolence) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonViolence#b0b637fd to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonViolence"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonViolence#b0b637fd: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonPornography represents TL type `chatReportReasonPornography#2b123871`.
type ChatReportReasonPornography struct {
}

// ChatReportReasonPornographyTypeID is TL type id of ChatReportReasonPornography.
const ChatReportReasonPornographyTypeID = 0x2b123871

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonPornography) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonPornography.
var (
	_ bin.Encoder     = &ChatReportReasonPornography{}
	_ bin.Decoder     = &ChatReportReasonPornography{}
	_ bin.BareEncoder = &ChatReportReasonPornography{}
	_ bin.BareDecoder = &ChatReportReasonPornography{}

	_ ChatReportReasonClass = &ChatReportReasonPornography{}
)

func (c *ChatReportReasonPornography) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonPornography) String() string {
	if c == nil {
		return "ChatReportReasonPornography(nil)"
	}
	type Alias ChatReportReasonPornography
	return fmt.Sprintf("ChatReportReasonPornography%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonPornography) TypeID() uint32 {
	return ChatReportReasonPornographyTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonPornography) TypeName() string {
	return "chatReportReasonPornography"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonPornography) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonPornography",
		ID:   ChatReportReasonPornographyTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonPornography) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonPornography#2b123871 as nil")
	}
	b.PutID(ChatReportReasonPornographyTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonPornography) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonPornography#2b123871 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonPornography) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonPornography#2b123871 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonPornographyTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonPornography#2b123871: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonPornography) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonPornography#2b123871 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonPornography) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonPornography#2b123871 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonPornography")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonPornography) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonPornography#2b123871 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonPornography"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonPornography#2b123871: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonChildAbuse represents TL type `chatReportReasonChildAbuse#c02e9ebd`.
type ChatReportReasonChildAbuse struct {
}

// ChatReportReasonChildAbuseTypeID is TL type id of ChatReportReasonChildAbuse.
const ChatReportReasonChildAbuseTypeID = 0xc02e9ebd

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonChildAbuse) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonChildAbuse.
var (
	_ bin.Encoder     = &ChatReportReasonChildAbuse{}
	_ bin.Decoder     = &ChatReportReasonChildAbuse{}
	_ bin.BareEncoder = &ChatReportReasonChildAbuse{}
	_ bin.BareDecoder = &ChatReportReasonChildAbuse{}

	_ ChatReportReasonClass = &ChatReportReasonChildAbuse{}
)

func (c *ChatReportReasonChildAbuse) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonChildAbuse) String() string {
	if c == nil {
		return "ChatReportReasonChildAbuse(nil)"
	}
	type Alias ChatReportReasonChildAbuse
	return fmt.Sprintf("ChatReportReasonChildAbuse%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonChildAbuse) TypeID() uint32 {
	return ChatReportReasonChildAbuseTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonChildAbuse) TypeName() string {
	return "chatReportReasonChildAbuse"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonChildAbuse) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonChildAbuse",
		ID:   ChatReportReasonChildAbuseTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonChildAbuse) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonChildAbuse#c02e9ebd as nil")
	}
	b.PutID(ChatReportReasonChildAbuseTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonChildAbuse) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonChildAbuse#c02e9ebd as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonChildAbuse) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonChildAbuse#c02e9ebd to nil")
	}
	if err := b.ConsumeID(ChatReportReasonChildAbuseTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonChildAbuse#c02e9ebd: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonChildAbuse) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonChildAbuse#c02e9ebd to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonChildAbuse) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonChildAbuse#c02e9ebd as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonChildAbuse")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonChildAbuse) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonChildAbuse#c02e9ebd to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonChildAbuse"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonChildAbuse#c02e9ebd: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonCopyright represents TL type `chatReportReasonCopyright#3ad2dea0`.
type ChatReportReasonCopyright struct {
}

// ChatReportReasonCopyrightTypeID is TL type id of ChatReportReasonCopyright.
const ChatReportReasonCopyrightTypeID = 0x3ad2dea0

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonCopyright) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonCopyright.
var (
	_ bin.Encoder     = &ChatReportReasonCopyright{}
	_ bin.Decoder     = &ChatReportReasonCopyright{}
	_ bin.BareEncoder = &ChatReportReasonCopyright{}
	_ bin.BareDecoder = &ChatReportReasonCopyright{}

	_ ChatReportReasonClass = &ChatReportReasonCopyright{}
)

func (c *ChatReportReasonCopyright) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonCopyright) String() string {
	if c == nil {
		return "ChatReportReasonCopyright(nil)"
	}
	type Alias ChatReportReasonCopyright
	return fmt.Sprintf("ChatReportReasonCopyright%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonCopyright) TypeID() uint32 {
	return ChatReportReasonCopyrightTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonCopyright) TypeName() string {
	return "chatReportReasonCopyright"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonCopyright) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonCopyright",
		ID:   ChatReportReasonCopyrightTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonCopyright) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonCopyright#3ad2dea0 as nil")
	}
	b.PutID(ChatReportReasonCopyrightTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonCopyright) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonCopyright#3ad2dea0 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonCopyright) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonCopyright#3ad2dea0 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonCopyrightTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonCopyright#3ad2dea0: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonCopyright) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonCopyright#3ad2dea0 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonCopyright) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonCopyright#3ad2dea0 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonCopyright")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonCopyright) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonCopyright#3ad2dea0 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonCopyright"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonCopyright#3ad2dea0: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonUnrelatedLocation represents TL type `chatReportReasonUnrelatedLocation#282ad3`.
type ChatReportReasonUnrelatedLocation struct {
}

// ChatReportReasonUnrelatedLocationTypeID is TL type id of ChatReportReasonUnrelatedLocation.
const ChatReportReasonUnrelatedLocationTypeID = 0x282ad3

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonUnrelatedLocation) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonUnrelatedLocation.
var (
	_ bin.Encoder     = &ChatReportReasonUnrelatedLocation{}
	_ bin.Decoder     = &ChatReportReasonUnrelatedLocation{}
	_ bin.BareEncoder = &ChatReportReasonUnrelatedLocation{}
	_ bin.BareDecoder = &ChatReportReasonUnrelatedLocation{}

	_ ChatReportReasonClass = &ChatReportReasonUnrelatedLocation{}
)

func (c *ChatReportReasonUnrelatedLocation) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonUnrelatedLocation) String() string {
	if c == nil {
		return "ChatReportReasonUnrelatedLocation(nil)"
	}
	type Alias ChatReportReasonUnrelatedLocation
	return fmt.Sprintf("ChatReportReasonUnrelatedLocation%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonUnrelatedLocation) TypeID() uint32 {
	return ChatReportReasonUnrelatedLocationTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonUnrelatedLocation) TypeName() string {
	return "chatReportReasonUnrelatedLocation"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonUnrelatedLocation) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonUnrelatedLocation",
		ID:   ChatReportReasonUnrelatedLocationTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonUnrelatedLocation) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonUnrelatedLocation#282ad3 as nil")
	}
	b.PutID(ChatReportReasonUnrelatedLocationTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonUnrelatedLocation) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonUnrelatedLocation#282ad3 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonUnrelatedLocation) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonUnrelatedLocation#282ad3 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonUnrelatedLocationTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonUnrelatedLocation#282ad3: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonUnrelatedLocation) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonUnrelatedLocation#282ad3 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonUnrelatedLocation) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonUnrelatedLocation#282ad3 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonUnrelatedLocation")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonUnrelatedLocation) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonUnrelatedLocation#282ad3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonUnrelatedLocation"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonUnrelatedLocation#282ad3: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonFake represents TL type `chatReportReasonFake#99e22d92`.
type ChatReportReasonFake struct {
}

// ChatReportReasonFakeTypeID is TL type id of ChatReportReasonFake.
const ChatReportReasonFakeTypeID = 0x99e22d92

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonFake) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonFake.
var (
	_ bin.Encoder     = &ChatReportReasonFake{}
	_ bin.Decoder     = &ChatReportReasonFake{}
	_ bin.BareEncoder = &ChatReportReasonFake{}
	_ bin.BareDecoder = &ChatReportReasonFake{}

	_ ChatReportReasonClass = &ChatReportReasonFake{}
)

func (c *ChatReportReasonFake) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonFake) String() string {
	if c == nil {
		return "ChatReportReasonFake(nil)"
	}
	type Alias ChatReportReasonFake
	return fmt.Sprintf("ChatReportReasonFake%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonFake) TypeID() uint32 {
	return ChatReportReasonFakeTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonFake) TypeName() string {
	return "chatReportReasonFake"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonFake) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonFake",
		ID:   ChatReportReasonFakeTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonFake) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonFake#99e22d92 as nil")
	}
	b.PutID(ChatReportReasonFakeTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonFake) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonFake#99e22d92 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonFake) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonFake#99e22d92 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonFakeTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonFake#99e22d92: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonFake) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonFake#99e22d92 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonFake) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonFake#99e22d92 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonFake")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonFake) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonFake#99e22d92 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonFake"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonFake#99e22d92: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonIllegalDrugs represents TL type `chatReportReasonIllegalDrugs#cda95a55`.
type ChatReportReasonIllegalDrugs struct {
}

// ChatReportReasonIllegalDrugsTypeID is TL type id of ChatReportReasonIllegalDrugs.
const ChatReportReasonIllegalDrugsTypeID = 0xcda95a55

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonIllegalDrugs) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonIllegalDrugs.
var (
	_ bin.Encoder     = &ChatReportReasonIllegalDrugs{}
	_ bin.Decoder     = &ChatReportReasonIllegalDrugs{}
	_ bin.BareEncoder = &ChatReportReasonIllegalDrugs{}
	_ bin.BareDecoder = &ChatReportReasonIllegalDrugs{}

	_ ChatReportReasonClass = &ChatReportReasonIllegalDrugs{}
)

func (c *ChatReportReasonIllegalDrugs) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonIllegalDrugs) String() string {
	if c == nil {
		return "ChatReportReasonIllegalDrugs(nil)"
	}
	type Alias ChatReportReasonIllegalDrugs
	return fmt.Sprintf("ChatReportReasonIllegalDrugs%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonIllegalDrugs) TypeID() uint32 {
	return ChatReportReasonIllegalDrugsTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonIllegalDrugs) TypeName() string {
	return "chatReportReasonIllegalDrugs"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonIllegalDrugs) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonIllegalDrugs",
		ID:   ChatReportReasonIllegalDrugsTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonIllegalDrugs) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonIllegalDrugs#cda95a55 as nil")
	}
	b.PutID(ChatReportReasonIllegalDrugsTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonIllegalDrugs) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonIllegalDrugs#cda95a55 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonIllegalDrugs) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonIllegalDrugs#cda95a55 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonIllegalDrugsTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonIllegalDrugs#cda95a55: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonIllegalDrugs) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonIllegalDrugs#cda95a55 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonIllegalDrugs) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonIllegalDrugs#cda95a55 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonIllegalDrugs")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonIllegalDrugs) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonIllegalDrugs#cda95a55 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonIllegalDrugs"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonIllegalDrugs#cda95a55: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonPersonalDetails represents TL type `chatReportReasonPersonalDetails#42d38775`.
type ChatReportReasonPersonalDetails struct {
}

// ChatReportReasonPersonalDetailsTypeID is TL type id of ChatReportReasonPersonalDetails.
const ChatReportReasonPersonalDetailsTypeID = 0x42d38775

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonPersonalDetails) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonPersonalDetails.
var (
	_ bin.Encoder     = &ChatReportReasonPersonalDetails{}
	_ bin.Decoder     = &ChatReportReasonPersonalDetails{}
	_ bin.BareEncoder = &ChatReportReasonPersonalDetails{}
	_ bin.BareDecoder = &ChatReportReasonPersonalDetails{}

	_ ChatReportReasonClass = &ChatReportReasonPersonalDetails{}
)

func (c *ChatReportReasonPersonalDetails) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonPersonalDetails) String() string {
	if c == nil {
		return "ChatReportReasonPersonalDetails(nil)"
	}
	type Alias ChatReportReasonPersonalDetails
	return fmt.Sprintf("ChatReportReasonPersonalDetails%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonPersonalDetails) TypeID() uint32 {
	return ChatReportReasonPersonalDetailsTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonPersonalDetails) TypeName() string {
	return "chatReportReasonPersonalDetails"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonPersonalDetails) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonPersonalDetails",
		ID:   ChatReportReasonPersonalDetailsTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonPersonalDetails) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonPersonalDetails#42d38775 as nil")
	}
	b.PutID(ChatReportReasonPersonalDetailsTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonPersonalDetails) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonPersonalDetails#42d38775 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonPersonalDetails) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonPersonalDetails#42d38775 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonPersonalDetailsTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonPersonalDetails#42d38775: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonPersonalDetails) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonPersonalDetails#42d38775 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonPersonalDetails) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonPersonalDetails#42d38775 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonPersonalDetails")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonPersonalDetails) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonPersonalDetails#42d38775 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonPersonalDetails"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonPersonalDetails#42d38775: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonCustom represents TL type `chatReportReasonCustom#4cd37316`.
type ChatReportReasonCustom struct {
}

// ChatReportReasonCustomTypeID is TL type id of ChatReportReasonCustom.
const ChatReportReasonCustomTypeID = 0x4cd37316

// construct implements constructor of ChatReportReasonClass.
func (c ChatReportReasonCustom) construct() ChatReportReasonClass { return &c }

// Ensuring interfaces in compile-time for ChatReportReasonCustom.
var (
	_ bin.Encoder     = &ChatReportReasonCustom{}
	_ bin.Decoder     = &ChatReportReasonCustom{}
	_ bin.BareEncoder = &ChatReportReasonCustom{}
	_ bin.BareDecoder = &ChatReportReasonCustom{}

	_ ChatReportReasonClass = &ChatReportReasonCustom{}
)

func (c *ChatReportReasonCustom) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatReportReasonCustom) String() string {
	if c == nil {
		return "ChatReportReasonCustom(nil)"
	}
	type Alias ChatReportReasonCustom
	return fmt.Sprintf("ChatReportReasonCustom%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatReportReasonCustom) TypeID() uint32 {
	return ChatReportReasonCustomTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatReportReasonCustom) TypeName() string {
	return "chatReportReasonCustom"
}

// TypeInfo returns info about TL type.
func (c *ChatReportReasonCustom) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatReportReasonCustom",
		ID:   ChatReportReasonCustomTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatReportReasonCustom) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonCustom#4cd37316 as nil")
	}
	b.PutID(ChatReportReasonCustomTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatReportReasonCustom) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonCustom#4cd37316 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatReportReasonCustom) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonCustom#4cd37316 to nil")
	}
	if err := b.ConsumeID(ChatReportReasonCustomTypeID); err != nil {
		return fmt.Errorf("unable to decode chatReportReasonCustom#4cd37316: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatReportReasonCustom) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonCustom#4cd37316 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatReportReasonCustom) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatReportReasonCustom#4cd37316 as nil")
	}
	b.ObjStart()
	b.PutID("chatReportReasonCustom")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatReportReasonCustom) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatReportReasonCustom#4cd37316 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatReportReasonCustom"); err != nil {
				return fmt.Errorf("unable to decode chatReportReasonCustom#4cd37316: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatReportReasonClassName is schema name of ChatReportReasonClass.
const ChatReportReasonClassName = "ChatReportReason"

// ChatReportReasonClass represents ChatReportReason generic type.
//
// Example:
//
//	g, err := tdapi.DecodeChatReportReason(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.ChatReportReasonSpam: // chatReportReasonSpam#e18d10a1
//	case *tdapi.ChatReportReasonViolence: // chatReportReasonViolence#b0b637fd
//	case *tdapi.ChatReportReasonPornography: // chatReportReasonPornography#2b123871
//	case *tdapi.ChatReportReasonChildAbuse: // chatReportReasonChildAbuse#c02e9ebd
//	case *tdapi.ChatReportReasonCopyright: // chatReportReasonCopyright#3ad2dea0
//	case *tdapi.ChatReportReasonUnrelatedLocation: // chatReportReasonUnrelatedLocation#282ad3
//	case *tdapi.ChatReportReasonFake: // chatReportReasonFake#99e22d92
//	case *tdapi.ChatReportReasonIllegalDrugs: // chatReportReasonIllegalDrugs#cda95a55
//	case *tdapi.ChatReportReasonPersonalDetails: // chatReportReasonPersonalDetails#42d38775
//	case *tdapi.ChatReportReasonCustom: // chatReportReasonCustom#4cd37316
//	default: panic(v)
//	}
type ChatReportReasonClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() ChatReportReasonClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeChatReportReason implements binary de-serialization for ChatReportReasonClass.
func DecodeChatReportReason(buf *bin.Buffer) (ChatReportReasonClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChatReportReasonSpamTypeID:
		// Decoding chatReportReasonSpam#e18d10a1.
		v := ChatReportReasonSpam{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonViolenceTypeID:
		// Decoding chatReportReasonViolence#b0b637fd.
		v := ChatReportReasonViolence{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonPornographyTypeID:
		// Decoding chatReportReasonPornography#2b123871.
		v := ChatReportReasonPornography{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonChildAbuseTypeID:
		// Decoding chatReportReasonChildAbuse#c02e9ebd.
		v := ChatReportReasonChildAbuse{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonCopyrightTypeID:
		// Decoding chatReportReasonCopyright#3ad2dea0.
		v := ChatReportReasonCopyright{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonUnrelatedLocationTypeID:
		// Decoding chatReportReasonUnrelatedLocation#282ad3.
		v := ChatReportReasonUnrelatedLocation{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonFakeTypeID:
		// Decoding chatReportReasonFake#99e22d92.
		v := ChatReportReasonFake{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonIllegalDrugsTypeID:
		// Decoding chatReportReasonIllegalDrugs#cda95a55.
		v := ChatReportReasonIllegalDrugs{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonPersonalDetailsTypeID:
		// Decoding chatReportReasonPersonalDetails#42d38775.
		v := ChatReportReasonPersonalDetails{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case ChatReportReasonCustomTypeID:
		// Decoding chatReportReasonCustom#4cd37316.
		v := ChatReportReasonCustom{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONChatReportReason implements binary de-serialization for ChatReportReasonClass.
func DecodeTDLibJSONChatReportReason(buf tdjson.Decoder) (ChatReportReasonClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "chatReportReasonSpam":
		// Decoding chatReportReasonSpam#e18d10a1.
		v := ChatReportReasonSpam{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonViolence":
		// Decoding chatReportReasonViolence#b0b637fd.
		v := ChatReportReasonViolence{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonPornography":
		// Decoding chatReportReasonPornography#2b123871.
		v := ChatReportReasonPornography{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonChildAbuse":
		// Decoding chatReportReasonChildAbuse#c02e9ebd.
		v := ChatReportReasonChildAbuse{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonCopyright":
		// Decoding chatReportReasonCopyright#3ad2dea0.
		v := ChatReportReasonCopyright{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonUnrelatedLocation":
		// Decoding chatReportReasonUnrelatedLocation#282ad3.
		v := ChatReportReasonUnrelatedLocation{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonFake":
		// Decoding chatReportReasonFake#99e22d92.
		v := ChatReportReasonFake{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonIllegalDrugs":
		// Decoding chatReportReasonIllegalDrugs#cda95a55.
		v := ChatReportReasonIllegalDrugs{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonPersonalDetails":
		// Decoding chatReportReasonPersonalDetails#42d38775.
		v := ChatReportReasonPersonalDetails{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	case "chatReportReasonCustom":
		// Decoding chatReportReasonCustom#4cd37316.
		v := ChatReportReasonCustom{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChatReportReasonClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// ChatReportReason boxes the ChatReportReasonClass providing a helper.
type ChatReportReasonBox struct {
	ChatReportReason ChatReportReasonClass
}

// Decode implements bin.Decoder for ChatReportReasonBox.
func (b *ChatReportReasonBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChatReportReasonBox to nil")
	}
	v, err := DecodeChatReportReason(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChatReportReason = v
	return nil
}

// Encode implements bin.Encode for ChatReportReasonBox.
func (b *ChatReportReasonBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChatReportReason == nil {
		return fmt.Errorf("unable to encode ChatReportReasonClass as nil")
	}
	return b.ChatReportReason.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for ChatReportReasonBox.
func (b *ChatReportReasonBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChatReportReasonBox to nil")
	}
	v, err := DecodeTDLibJSONChatReportReason(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChatReportReason = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for ChatReportReasonBox.
func (b *ChatReportReasonBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.ChatReportReason == nil {
		return fmt.Errorf("unable to encode ChatReportReasonClass as nil")
	}
	return b.ChatReportReason.EncodeTDLibJSON(buf)
}
